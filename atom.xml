<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LicsberBlog</title>
  
  <subtitle>来人间一场</subtitle>
  <link href="https://licsber.site/atom.xml" rel="self"/>
  
  <link href="https://licsber.site/"/>
  <updated>2025-03-01T02:59:05.908Z</updated>
  <id>https://licsber.site/</id>
  
  <author>
    <name>licsber</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通往奴役之路（一）</title>
    <link href="https://licsber.site/2024/10/16/%E9%80%9A%E5%BE%80%E5%A5%B4%E5%BD%B9%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://licsber.site/2024/10/16/%E9%80%9A%E5%BE%80%E5%A5%B4%E5%BD%B9%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-10-16T03:02:11.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<p>现代资本主义国家奉行的自由主义经济思想，本质上是生产资料的私有化。现代社会最重要的其实不是财富本身，而是生产资料的所属。如果国家掌握了所有生产资料，我们就称其为完全的社会主义国家：大家人人生而平等，向国家提供相同的“社会必要劳动时间”就可以换取自身、也即私利的必要生活资源。</p><p>现代化中国显然还未达成这点，我们仍需要市场经济体制，靠市场来完成资源的一次分配，依赖最公平的教育与考核将人们分为三六九等，这样拥有更多生产力的人也就可以获取到更多的社会资源。同时，由于生产资料的未全部国有化&#x2F;集体化，持有生产资料的个体会获取除了资源以外的东西，即对分配的管理权。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现代资本主义国家奉行的自由主义经济思想，本质上是生产资料的私有化。现代社会最重要的其实不是财富本身，而是生产资料的所属。如果国家掌握了所有生产资料，我们就称其为完全的社会主义国家：大家人人生而平等，向国家提供相同的“社会必要劳动时间”就可以换取自身、也即私利的必要生活资源。</summary>
      
    
    
    
    <category term="book" scheme="https://licsber.site/categories/book/"/>
    
    
    <category term="哈耶克" scheme="https://licsber.site/tags/%E5%93%88%E8%80%B6%E5%85%8B/"/>
    
    <category term="通往奴役之路" scheme="https://licsber.site/tags/%E9%80%9A%E5%BE%80%E5%A5%B4%E5%BD%B9%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>何为爱情</title>
    <link href="https://licsber.site/2024/06/30/%E4%BD%95%E4%B8%BA%E7%88%B1%E6%83%85/"/>
    <id>https://licsber.site/2024/06/30/%E4%BD%95%E4%B8%BA%E7%88%B1%E6%83%85/</id>
    <published>2024-06-29T16:44:10.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浮木之恋：依赖非爱"><a href="#浮木之恋：依赖非爱" class="headerlink" title="浮木之恋：依赖非爱"></a>浮木之恋：依赖非爱</h2><p>听到一个比喻，爱情就像是，溺水的人忽然抓到了一只手，它是如此的强力，于泥潭之中将其解救。</p><p>但假如，一个人只有在最不好的时候才能想到你，才把你的作用体现，那和抽屉里过期的止疼药有什么区别呢？</p><p>和这种洪水中的「浮木」谈恋爱，那自己必然不是完整状态，或者说健康状态。</p><p>自己将是残血的，期待从另一个世界得到救赎。</p><p>或许，连救赎都算不上，仅是自己无法温暖自己，藉由他人的温暖获得满足。</p><p>自身并没有给予爱的能力，在这种关系中，爱情似乎变成了一种应急措施，而非生活中自然而然的陪伴与分享。</p><p>就像是夜空中偶尔闪烁的流星，虽令人一时惊艳，却无法成为长久照亮彼此的恒星。</p><p>这样的爱情，建立在需求与依赖的不对等之上，缺乏了相互扶持、共同成长的基础。</p><p>当一个人仅在最困顿、最无助时才转向你，仿佛你是他们生命中的备用选项，那么这份情感的纯粹与深度便值得质疑。</p><h2 id="陪伴是最长情的告白"><a href="#陪伴是最长情的告白" class="headerlink" title="陪伴是最长情的告白"></a>陪伴是最长情的告白</h2><p>也没有人活该是另一个人的浮木，浮木也会沉。</p><p>但人，作为社会性动物需要陪伴，陪伴是一种「渴望」，这不是一种精神上满足的「想要」。</p><p>如同生灵对水的渴望一样，它是客观存在的，浮木当然也会有客观上的需要。</p><p>在这场恋爱中的TA，除了当对方的浮木，更像是在照顾一只宠物。</p><p>对于宠物的溺爱，虽然也是付出爱的一种，但宠物总是不对等的。</p><p>宠物的感激与需要往往源于TA自身的匮乏，而非对浮木本质的欣赏与爱慕。</p><p>你不能奢求宠物能完全听懂你的话；也不应该反过来，要求宠物关注你的生活起居。</p><p>甚至，想要宠物来满足你渴望得到的陪伴，毕竟，这也不是TA活该的。</p><h2 id="通往幸福之路"><a href="#通往幸福之路" class="headerlink" title="通往幸福之路"></a>通往幸福之路</h2><p>那到底怎么样才算相爱呢？我认为的爱情应该是两个灵魂的彼此救赎。</p><p>说是苦难吧，或许言过其实，显得我们过得也太惨了。</p><p>但我们的日子确实布满了不易的足迹，然而，在这不易之中，我们学会了成为彼此的光。</p><p>在彼此的眼中寻找光亮，是那份“有你，真好”的坚定与温柔。</p><p>我们愿意倾听彼此心底的声音，即使那声音微弱得如同夜空中最遥远的星光。</p><p>我们愿意拥抱彼此的伤痕，因为那些伤痕背后藏着同样坚韧的生命力量。</p><p>祈祷岁月对我最大的庇护，就是让我在一份波澜不惊的爱里，走完此生此世。</p><p>所以，你做好准备了吗，我的爱人？我们将在未来的某一个午后，相知相识。</p><p>度过一个又一个冬夏，无论风和日丽、风雨交加，都能拥有手牵手前行的坚定。</p><p>愿意并肩站立，共享人生风雨与阳光，才是通往真正幸福的道路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浮木之恋：依赖非爱&quot;&gt;&lt;a href=&quot;#浮木之恋：依赖非爱&quot; class=&quot;headerlink&quot; title=&quot;浮木之恋：依赖非爱&quot;&gt;&lt;/a&gt;浮木之恋：依赖非爱&lt;/h2&gt;&lt;p&gt;听到一个比喻，爱情就像是，溺水的人忽然抓到了一只手，它是如此的强力，于泥潭之中将其解</summary>
      
    
    
    
    <category term="life" scheme="https://licsber.site/categories/life/"/>
    
    
    <category term="LOVE" scheme="https://licsber.site/tags/LOVE/"/>
    
    <category term="人生问题" scheme="https://licsber.site/tags/%E4%BA%BA%E7%94%9F%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>人月神话的困境：项目经理的挑战与转变</title>
    <link href="https://licsber.site/2024/03/29/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E7%9A%84%E5%9B%B0%E5%A2%83/"/>
    <id>https://licsber.site/2024/03/29/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E7%9A%84%E5%9B%B0%E5%A2%83/</id>
    <published>2024-03-29T08:32:09.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性思维的束缚与局限"><a href="#线性思维的束缚与局限" class="headerlink" title="线性思维的束缚与局限"></a>线性思维的束缚与局限</h2><p>很多“聪明人”的思维都是线性思维，拿到任务，分解成小项，逐个完成，一步一步的像是在做证明题：期待着攒够一个又一个的事实和推理，最后拼图一般将它们串起来，达成某项任务。逻辑层面上看起来无懈可击，仿佛一切困难都可迎刃而解。</p><p>不可否认的是这套思维在应试方面屡试不爽，因为有一个天然的假设是存在的：“所有问题都有标准答案，问题在设计上就是逻辑可解的”。但是习惯这套“逻辑“的人，在处理现实世界的问题时，往往会不自觉地将自己带入死胡同。</p><h2 id="逻辑、事实关联的对立与统一"><a href="#逻辑、事实关联的对立与统一" class="headerlink" title="逻辑、事实关联的对立与统一"></a>逻辑、事实关联的对立与统一</h2><p>我将以上方法论称之为逻辑关联，与之相对的即是事实关联，生活中不乏遇到这种思维陷阱：</p><ul><li>白菜3块钱一斤，15块钱可以买五斤白菜</li><li>你们工厂一个月可以生产3000个零件，那明天先给我10个吧</li><li>这个项目比较急，上次排期的工时是一周，我再给你一倍的人，三天给我做出来</li></ul><p>有时候其实很难意识到这样的思考模式存在的问题，这也是《人月神话》里屡次提到的困境，可能上面的例子不太直观，代入下现实生活：</p><ul><li>生一个孩子需要9个月，生一对双胞胎需要18个月</li><li>生一个孩子需要9个月，9个妈妈是不是只要1个月？！</li></ul><p>专注解决问题的思维方式久了，就会慢慢开始只在乎逻辑关联，而忽略事实关联，就会开始期待一种“银弹”，说是缘木求鱼也不过如此。</p><h2 id="初级项目经理常见的误区与反思"><a href="#初级项目经理常见的误区与反思" class="headerlink" title="初级项目经理常见的误区与反思"></a>初级项目经理常见的误区与反思</h2><p>很多初级项目经理最常犯的错误就在这里，总是期待着任何事情都有一个进度条，这样就可以直观的反馈当前进展，自己要做的也就不过是按照排期表往下催进度。</p><p>这种人最喜欢问的问题就是“你这个要多久才能做出来？”，行使着身为“管理者”的特权，却不承担应有的角色义务。</p><p>项目经理这个角色，真正应该问的问题是“你还需要哪些其他的帮助可以提升你的速度？”。优秀的项目经理知道，项目进度不是靠完成了多少来判断，而是靠如何拥有足够的资源进行最大规模的试错。项目经理确保的应该是满足需求，成功交付。</p><p>然而现实中X-Y本末倒置的现象非常普遍，即为了完成某个目标，制定了一些KPI（关键绩效指标），最后完全忽视了原初的目标，而去追求后定的KPI。就像是前段时间北京环卫工人买新鲜白菜当厨余垃圾事件，政策目标是垃圾分类，管理者制定了每种垃圾必须的数量指标，然后只考察这个数量指标，下面执行的人就变了味，偏离初衷，最终酿成悲剧。</p><h2 id="软件行业里人的特殊性"><a href="#软件行业里人的特殊性" class="headerlink" title="软件行业里人的特殊性"></a>软件行业里人的特殊性</h2><p>再者，项目经理在向上汇报进度的同时，也在享受作为一个管理者的荣誉，以及成功后收割胜利果实。这使得执行层面的人本身就对这些只能汇报进度，却无法承担执行工作的人非常敌视。</p><p>况且在软件开发这个对人依赖非常大的领域，管理起来更需要一定的水平积累。项目经理每天跟人打交道，要知道人是有感情的，绝对不是你给他输入1+1，他就给你输出2。同一个功能点同一个人，由于其工作状态的差别，也会产生巨大的差异，如果主动积极做，可能只要1天，消极怠工的做，就无法预期了。这在传统行业是无法想象的，因为只要按规定的程序和规范来建房子，即使换一拨工人，也可以在同样的时间建造出来，建出来的房子的质量也不会相差太远。要知道，再烂的挖土机也能挖出一个大坑。</p><h2 id="结果导向与过程管理的平衡：避免悲剧的关键"><a href="#结果导向与过程管理的平衡：避免悲剧的关键" class="headerlink" title="结果导向与过程管理的平衡：避免悲剧的关键"></a>结果导向与过程管理的平衡：避免悲剧的关键</h2><p>执行时，对软件工程师来说，遇到问题，解决问题。但如果遇到的问题占用了比预期更多的时间，则是对自己能力和自信的打击。此时如果项目经理也不专业，硬推进度，工程师就会出现一些掩盖问题的行为。</p><p>我总觉得，负责技术攻坚的人也去追进度就很可惜。悲剧的根源是管理能力和技巧的不足，如果真的想做到结果导向，需要的是目标的制定和拆解，工作计划的精确评估和执行，真实有效的复盘，信息同步与应对突发状况的能力，这些都对领导者有很高的要求，如果能力不足以管理结果，那大家就只能来管理过程，最终陷入恶性循环。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.woshipm.com/zhichang/1554995.html">工程师想要做管理？先改变你的思考方式</a></p><p><a href="https://www.cnblogs.com/coprince/p/9155384.html">从程序员到项目经理：为什么要当项目经理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性思维的束缚与局限&quot;&gt;&lt;a href=&quot;#线性思维的束缚与局限&quot; class=&quot;headerlink&quot; title=&quot;线性思维的束缚与局限&quot;&gt;&lt;/a&gt;线性思维的束缚与局限&lt;/h2&gt;&lt;p&gt;很多“聪明人”的思维都是线性思维，拿到任务，分解成小项，逐个完成，一步一步的</summary>
      
    
    
    
    <category term="book" scheme="https://licsber.site/categories/book/"/>
    
    
    <category term="人月神话" scheme="https://licsber.site/tags/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/"/>
    
    <category term="项目管理" scheme="https://licsber.site/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    <category term="软件工程" scheme="https://licsber.site/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="项目经理" scheme="https://licsber.site/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>花开堪折直须折</title>
    <link href="https://licsber.site/2024/02/20/%E8%8A%B1%E5%BC%80%E5%A0%AA%E6%8A%98%E7%9B%B4%E9%A1%BB%E6%8A%98/"/>
    <id>https://licsber.site/2024/02/20/%E8%8A%B1%E5%BC%80%E5%A0%AA%E6%8A%98%E7%9B%B4%E9%A1%BB%E6%8A%98/</id>
    <published>2024-02-20T15:49:08.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<p>给你讲一个故事吧。</p><p>母校湖边有一处牌子，上面写着“花开堪赏直须赏，莫要折花空赏枝”。</p><p>我觉得不好。花期到了，恰是最美的时刻。似，恰同学少年，风华正茂，更需把握时机，趁春光正好，趁风头正劲，发挥好这一刻。</p><p>哪怕为了这一刻就此香消玉殒，也要勇敢地去追求，积极地去争取，莫要让时间风化一切，人生从来不是活365天，而是活在每一个耀眼的瞬间。</p><p>依我看来，这正是“花开堪折直须折，莫待无花空折枝”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;给你讲一个故事吧。&lt;/p&gt;
&lt;p&gt;母校湖边有一处牌子，上面写着“花开堪赏直须赏，莫要折花空赏枝”。&lt;/p&gt;
&lt;p&gt;我觉得不好。花期到了，恰是最美的时刻。似，恰同学少年，风华正茂，更需把握时机，趁春光正好，趁风头正劲，发挥好这一刻。&lt;/p&gt;
&lt;p&gt;哪怕为了这一刻就此香消玉殒，</summary>
      
    
    
    
    <category term="life" scheme="https://licsber.site/categories/life/"/>
    
    
    <category term="有感" scheme="https://licsber.site/tags/%E6%9C%89%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Docker使用buildx来取代传统build并同时构建多架构镜像</title>
    <link href="https://licsber.site/2024/02/12/Docker%E4%BD%BF%E7%94%A8buildx%E6%9D%A5%E5%8F%96%E4%BB%A3%E4%BC%A0%E7%BB%9Fbuild%E5%B9%B6%E5%90%8C%E6%97%B6%E6%9E%84%E5%BB%BA%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F/"/>
    <id>https://licsber.site/2024/02/12/Docker%E4%BD%BF%E7%94%A8buildx%E6%9D%A5%E5%8F%96%E4%BB%A3%E4%BC%A0%E7%BB%9Fbuild%E5%B9%B6%E5%90%8C%E6%97%B6%E6%9E%84%E5%BB%BA%E5%A4%9A%E6%9E%B6%E6%9E%84%E9%95%9C%E5%83%8F/</id>
    <published>2024-02-11T16:22:07.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Docker更新了build流程，提供了全新的构建工具，原先的<code>docker build</code>命令已经被标记为<code>@deprecated</code>啦！是时候学习新的buildx工具，<del>开始装逼啦</del>努力追上时代啦~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo pacman -S docker-buildx</span></span><br><span class="line"><span class="built_in">sudo</span> docker buildx</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Usage:  docker buildx [OPTIONS] COMMAND</span><br><span class="line"></span><br><span class="line">Extended build capabilities with BuildKit</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --builder string   Override the configured builder instance</span><br><span class="line"></span><br><span class="line">Management Commands:</span><br><span class="line">  imagetools  Commands to work on images in registry</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  bake        Build from a file</span><br><span class="line">  build       Start a build</span><br><span class="line">  create      Create a new builder instance</span><br><span class="line">  du          Disk usage</span><br><span class="line">  inspect     Inspect current builder instance</span><br><span class="line">  ls          List builder instances</span><br><span class="line">  prune       Remove build cache</span><br><span class="line">  rm          Remove a builder instance</span><br><span class="line">  stop        Stop builder instance</span><br><span class="line">  use         Set the current builder instance</span><br><span class="line">  version     Show buildx version information</span><br><span class="line"></span><br><span class="line">Run &#x27;docker buildx COMMAND --help&#x27; for more information on a command.</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>其实吧，和普通的build相比，没啥区别，但是多了好多集成化的功能，请看示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker buildx build \</span><br><span class="line">  --platform <span class="variable">$PLATFORM</span> \</span><br><span class="line">  -t <span class="string">&quot;<span class="variable">$IMAGE</span>:<span class="variable">$TAG</span>&quot;</span> \</span><br><span class="line">  -t <span class="string">&quot;<span class="variable">$IMAGE</span>:latest&quot;</span> \</span><br><span class="line">  --pull --push .</span><br></pre></td></tr></table></figure><p>可以看到，pull（始终拉取新镜像，指FROM里的内容），push（自动build后push），platform（新增多架构构建），还是有着节省行数的好处的（</p><p>另外，x86的机器上也可以直接构建arm镜像啦，这里使用树莓派常用的arm64（也就是aarch64）举例，首先我们要建立一个buildx环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker buildx create \</span><br><span class="line">  --name multi_platform \</span><br><span class="line">  --use --platform \</span><br><span class="line">  linux/amd64,linux/arm64 \</span><br><span class="line">  --driver docker-container</span><br></pre></td></tr></table></figure><p>然后用ls命令即可看到这个环境支持的架构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker buildx <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NAME/NODE         DRIVER/ENDPOINT             STATUS  BUILDKIT             PLATFORMS</span><br><span class="line">multi_platform *  docker-container                                         </span><br><span class="line">  multi_platform0 unix:///var/run/docker.sock running v0.12.5              linux/amd64*, linux/arm64*, linux/amd64/v2, linux/amd64/v3, linux/amd64/v4, linux/386</span><br><span class="line">default           docker                                                   </span><br><span class="line">  default         default                     running v0.11.7+d3e6c1360f6e linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/amd64/v4, linux/386</span><br></pre></td></tr></table></figure><p>可以看到，后面有些奇怪的东西，x86怎么还有v2、v3、v4，这激发了我的好奇心，搜索发现，其实是指令集更新的区别，这里Golang给的最直观：</p><p>来自：<a href="https://go.dev/wiki/MinimumRequirements">https://go.dev/wiki/MinimumRequirements</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GOAMD64=v1 (default): The baseline. Exclusively generates instructions that all 64-bit x86 processors can execute.</span><br><span class="line">GOAMD64=v2: all v1 instructions, plus CMPXCHG16B, LAHF, SAHF, POPCNT, SSE3, SSE4.1, SSE4.2, SSSE3.</span><br><span class="line">GOAMD64=v3: all v2 instructions, plus AVX, AVX2, BMI1, BMI2, F16C, FMA, LZCNT, MOVBE, OSXSAVE.</span><br><span class="line">GOAMD64=v4: all v3 instructions, plus AVX512F, AVX512BW, AVX512CD, AVX512DQ, AVX512VL.</span><br></pre></td></tr></table></figure><h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><p>关于自己的发行版目前支持的指令集，可以用以下命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/lib/ld-linux-x86-64.so.2 --<span class="built_in">help</span> | grep <span class="string">&quot;x86-64-v&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x86-64-v4 (supported, searched)</span><br><span class="line">x86-64-v3 (supported, searched)</span><br><span class="line">x86-64-v2 (supported, searched)</span><br></pre></td></tr></table></figure><p>还有不少人（Gentoo狂热者？）把自己电脑里所有程序都改成v4构建的，以提高性能，Ubuntu文档里就有这样说：</p><p><a href="https://cn.ubuntu.com/blog/optimising-ubuntu-performance-on-amd64-architecture_cn">https://cn.ubuntu.com/blog/optimising-ubuntu-performance-on-amd64-architecture_cn</a></p><p>还有Arch系的大佬介绍：</p><p><a href="https://blog.chyk.ink/2022/08/11/arch-linux-upgrade-to-x86-64-v3-microarchitecture/">https://blog.chyk.ink/2022/08/11/arch-linux-upgrade-to-x86-64-v3-microarchitecture/</a></p><h2 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h2><p>B站：<a href="https://www.bilibili.com/video/BV14A4m1V7zT/">https://www.bilibili.com/video/BV14A4m1V7zT/</a></p><HTML><iframe src="//player.bilibili.com/player.html?aid=1100730648&bvid=BV14A4m1V7zT&cid=1437275112&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></HTML>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Docker更新了build流程，提供了全新的构建工具，原先的&lt;code&gt;docker build&lt;/code&gt;命令已经被标记为&lt;code&gt;</summary>
      
    
    
    
    <category term="tech" scheme="https://licsber.site/categories/tech/"/>
    
    
    <category term="bilibili" scheme="https://licsber.site/tags/bilibili/"/>
    
    <category term="video" scheme="https://licsber.site/tags/video/"/>
    
    <category term="Docker" scheme="https://licsber.site/tags/Docker/"/>
    
    <category term="buildx" scheme="https://licsber.site/tags/buildx/"/>
    
  </entry>
  
  <entry>
    <title>要拒绝眼高手低</title>
    <link href="https://licsber.site/2024/02/09/%E8%A6%81%E6%8B%92%E7%BB%9D%E7%9C%BC%E9%AB%98%E6%89%8B%E4%BD%8E/"/>
    <id>https://licsber.site/2024/02/09/%E8%A6%81%E6%8B%92%E7%BB%9D%E7%9C%BC%E9%AB%98%E6%89%8B%E4%BD%8E/</id>
    <published>2024-02-09T06:24:06.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<p>Make your hands dirty!</p><p>尝试去慢慢做一些practical的事情，会让你减轻许多焦虑感，掌握一技在手，安全感也就自然而然。</p><p>其实我比较羡慕厨师这个行业，一技在手，别人都会夸你“烧得一手好菜”。但是厨子和外界的联系太多了，袁枚有言“凡物各有先天，物性不良，虽易牙烹之，亦无味也”，厨子需要外界提供上好的食材，需要屠夫和菜农，但他们在现代标准化的流程中丧失了其风味，连带影响了上游的创造者，限制了其发挥。</p><p>但是计算机是一个从无到有的世界，是构筑在现代数学之上的理想国。普通家庭花3000块买个电脑，带来的创造性不会比九万八的苹果电脑更低，这其中人的主观能动性更为重要，这也是张雪峰所说“计算机是穷人家孩子的首选”之由来，相对而言，投入的本金很少，产出很高，也即性价比很高。</p><p>喜欢计算机，作为技术人，编程是充满乐趣的创造性工作（此处的工作不是认真工作中的工作，而是诸事自己掌控，脑力的结晶），看着自己写的代码一个个work起来，心中的喜悦是溢于言表的，要记住这种感觉，时常体会，才能让自己不至于陷于迷茫。</p><p>有些同学质疑项目越来越壮大之后，个人的掌控力会渐渐不足，毕竟软件开发工作是复杂的，虽然我们在极力用各种工程实践让一切变得有序可控，但它依然是依赖个人能力的一种创造性活动。这时候就需要一个舵手作为领导者来把控方向，作为领导者，我认为也不能带着白手套，而是积极参与，深入实践。这样才能最大程度的避免外行指导内行，要跟随最新的技术趋势，保持自己的核心竞争力。</p><p>愿不忘初心。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Make your hands dirty!&lt;/p&gt;
&lt;p&gt;尝试去慢慢做一些practical的事情，会让你减轻许多焦虑感，掌握一技在手，安全感也就自然而然。&lt;/p&gt;
&lt;p&gt;其实我比较羡慕厨师这个行业，一技在手，别人都会夸你“烧得一手好菜”。但是厨子和外界的联系太多了，袁枚</summary>
      
    
    
    
    <category term="life" scheme="https://licsber.site/categories/life/"/>
    
    
    <category term="软件工程" scheme="https://licsber.site/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="随园食单" scheme="https://licsber.site/tags/%E9%9A%8F%E5%9B%AD%E9%A3%9F%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>现存项目里加人是一场豪赌</title>
    <link href="https://licsber.site/2024/02/06/%E7%8E%B0%E5%AD%98%E9%A1%B9%E7%9B%AE%E9%87%8C%E5%8A%A0%E4%BA%BA%E6%98%AF%E4%B8%80%E5%9C%BA%E8%B1%AA%E8%B5%8C/"/>
    <id>https://licsber.site/2024/02/06/%E7%8E%B0%E5%AD%98%E9%A1%B9%E7%9B%AE%E9%87%8C%E5%8A%A0%E4%BA%BA%E6%98%AF%E4%B8%80%E5%9C%BA%E8%B1%AA%E8%B5%8C/</id>
    <published>2024-02-06T14:15:01.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<p>带语气视频版：<a href="https://www.bilibili.com/video/BV1ut421a7r1/">https://www.bilibili.com/video/BV1ut421a7r1/</a></p><HTML><iframe src="//player.bilibili.com/player.html?aid=1800476019&bvid=BV1ut421a7r1&cid=1432500559&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></HTML><p>副标题：谈软工圣经《人月神话》</p><p>我的专业是软件工程，顾名思义，软件和土木之类的相似，也是一个系统性的工程，系统就不免牵扯到人、机、料、法、环的方方面面，其中占据主导因素的就是参与项目的人。</p><p>软件工程，研究的便是如何将「软件项目」以标准化「工程项目」的方式去运作，即，尽量剥离掉人的主观能动性，发挥哪里需要哪里搬的“螺丝钉”作用。而不是像现在众多开源兴趣项目那样，以个人开发者的身份掌管一切、运作一切，一旦原作者弃坑，那么项目即宣告死刑，像ReiserFS作者，进监狱之后，Linux内核就把它标记为了Deprecated，无人问津。</p><p>但是任何人都不是等同的，作为“螺丝钉”也会有不同的型号，这里先不谈作为个体的独特个性，仅仅是为了能够有效的协作，身处同一个项目的“螺丝钉”们就需要不断地交流来对抗信息差，也即<strong>同步信息</strong>。</p><p>以下常见的协作问题很容易遇到：</p><ol><li>大家对项目最终愿景的理解不同（不明白设计初衷&#x2F;不了解最终客户需求）</li><li>同一职能的人们水平不同（项目中老带新非常常见&#x2F;某些新技术只有少数人理解）</li><li>分工角色和责任不明确（同一问题可以从不同方面解决&#x2F;团队中某小团体更为强势）</li></ol><p>对于一些小项目可能无关痛痒，十人以内还属于可以有效对齐的规模，依靠定期的会议沟通，即可同步所有人。但一旦超出规模，还按照原先的方式沟通，项目就可能会脱离控制，因为人与人之间的沟通是全连接型的，这时候人们往往会按职能来拆分小团体解决，比如前端团队、后端团队、运维团队、测试团队，本质上还是各个团队的领头人，即leader，承担了原先的职能作用。</p><p>设想一下，这样的项目团队，在正常的开发迭代周期内，现在接到了加快推进项目的任务，领导决定派遣更多人手来支援、分担项目任务，新加入项目的人可以直接上手干吗？</p><p>很明显不太可能，新人至少需要知道项目需求，阅读项目开始至今的开发文档、会议记录，再和项目组已有的成员沟通细节，才能尽可能地无缝加入项目进程。</p><p>而加入一个人，则意味着团队原先的N人，都新增了N条沟通链路，再加一个人，就又是N+1条链路，人越多只会越乱，最终大家在沟通同步上浪费越来越多的时间，导致项目虽然看上去增加了人手，但效率只会越来越低。</p><p>有没有一种解决方法呢？我认为有，因为问题的本质出在全连接沟通上，假如有这么一个人，他和所有人交流，并且把所有人的信息都同步到和他一致，那全连接的n²级别链路就简化为了n级别，这个人就是项目经理，所以项目经理这样一个角色，职责非常重要，他是项目不至于陷入混乱的前提和保证。</p><p>项目经理就有点类似BGP组网中的路由反射器RR，常规的IBGP节点之间都需要建立全连接关系，有了路由反射器之后，反射器可以作为中间节点汇聚所有路由信息，然后同步给其他IBGP节点，这样节省了节点之间的巨量连线和处理路由信息的额外负载。</p><p><img src="https://cdn.licsber.site/blog/2024/240206-BGP-RR.png" alt="https:&#x2F;&#x2F;www.sdnlab.com&#x2F;20294.html"></p><blockquote><p>原图链接：<a href="https://img1.sdnlab.com/wp-content/uploads/2017/11/EBGP-IBGP-fig-6.png">https://img1.sdnlab.com/wp-content/uploads/2017/11/EBGP-IBGP-fig-6.png</a></p></blockquote><p>当然《人月神话》作为软件工程的圣经，肯定不止告诉了我们这些，后续我看看结合现实再写一篇心得体会，好书值得慢慢回味~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;带语气视频版：&lt;a href=&quot;https://www.bilibili.com/video/BV1ut421a7r1/&quot;&gt;https://www.bilibili.com/video/BV1ut421a7r1/&lt;/a&gt;&lt;/p&gt;
&lt;HTML&gt;
&lt;iframe src=&quot;//</summary>
      
    
    
    
    <category term="book" scheme="https://licsber.site/categories/book/"/>
    
    
    <category term="人月神话" scheme="https://licsber.site/tags/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/"/>
    
    <category term="bilibili" scheme="https://licsber.site/tags/bilibili/"/>
    
    <category term="video" scheme="https://licsber.site/tags/video/"/>
    
    <category term="项目管理" scheme="https://licsber.site/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    <category term="软件工程" scheme="https://licsber.site/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>个人能力和个人资源哪个更重要？论“关系户”的合理性</title>
    <link href="https://licsber.site/2024/01/14/%E4%B8%AA%E4%BA%BA%E8%83%BD%E5%8A%9B%E5%92%8C%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%BA%90%E5%93%AA%E4%B8%AA%E6%9B%B4%E9%87%8D%E8%A6%81%EF%BC%9F%E8%AE%BA%E2%80%9C%E5%85%B3%E7%B3%BB%E6%88%B7%E2%80%9D%E7%9A%84%E5%90%88%E7%90%86%E6%80%A7/"/>
    <id>https://licsber.site/2024/01/14/%E4%B8%AA%E4%BA%BA%E8%83%BD%E5%8A%9B%E5%92%8C%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%BA%90%E5%93%AA%E4%B8%AA%E6%9B%B4%E9%87%8D%E8%A6%81%EF%BC%9F%E8%AE%BA%E2%80%9C%E5%85%B3%E7%B3%BB%E6%88%B7%E2%80%9D%E7%9A%84%E5%90%88%E7%90%86%E6%80%A7/</id>
    <published>2024-01-14T14:01:06.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<p>带语气视频版：<a href="https://www.bilibili.com/video/BV1vt4y1R7gF/">https://www.bilibili.com/video/BV1vt4y1R7gF/</a></p><HTML><iframe src="//player.bilibili.com/player.html?aid=623764415&bvid=BV1vt4y1R7gF&cid=1406791810&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></HTML><p>讨论：&#x2F;t&#x2F;1008613#reply38</p><p>这个话题其实开始于大概三年前的一次讨论，当时我身为学校实验室的负责人，在忙活一年一度的招新工作。大致介绍下我们实验室的情况，说是实验室，其实更偏向因兴趣结合，有导师带队的项目工作坊，在机器人竞赛方面有着深厚的经验积累和历年优秀的战绩。大家呢基本都是技术出身，每个人在上位机视觉、下位机控制、硬件和机械结构方面各有所长，因为我是软件方面做得比较多，所以软件类的招新题是我来出。</p><p>在我们软件组内部商量的时候，就有人提出考核的方式是更偏现场小题，还是工程项目类似的综合大题，前者可以确保考察到个人能力，但是考察方面并不全面，现场如果加上偏整体的简答题，招新时间就会太长，后者自己购置材料，完成类似循迹小车、倒立摆一样的综合课题，现场以硬性的性能指标验收，更能反应综合实力和对自动化、电控等方面的理解，但是会存在作弊的问题，即作品可能是由哪些学长学姐、自己家人帮助完成的，招新现场时间较短，可能提问反映不出来到底是不是自己靠实力独立完成的。</p><p>后面我们依然选择了后者，辅以招进来之后集中培训三个月，再来一场笔试考察大家的学习能力。简要讲讲我当时的看法，我和副组长的分歧集中在，面试者如果借用了外力的帮助，这个外力算不算他实力的一部分。我认为算，因为我们招新的目的就是打比赛、写论文、搞专利、做项目，需要能打的人，在项目中遇到一些困难，不管是技术上的困难，还是经济、流程上的困难，都需要人来克服。他这一次通过自己的关系，解决了问题，达成了目的，那下一次在我们的项目中，他也可以继续使用关系来构成帮助，这对我们是有益的。尽管你可能说，这不是他个人实力的一部分，可能做技术的人瞧不起这样没有真才实学的“混子”，但是为了集体的利益目标，他的存在有一定的合理性，而且人不会一直甘愿当一个混子，肯定他也会努力学习，提升自己的实力和话语权的。</p><p>从学校出来步入社会后，我发现工作中也是如此，虽然不想承认，但是“关系户”手里的关系，属于个人资源，确实也是个人实力的一部分。有些事情确实就需要这样的人出马，能减轻工作中很多繁琐，这也是我认为的，能够解决问题就是好的，有一点结果导向论了。奋斗、努力、刻苦钻研，最终解决了一个技术问题固然令人称赞，但是现实世界很多问题都不属于技术问题，纯粹是管理、流程类问题。在这些事情上，你的努力很可能就是事倍功半的，搞不好还会出幺蛾子，所以有时候追寻技术的纯粹性是好，也不能忽视别人在另一条路线上的能力。</p><p>常常听到，你十年寒窗，凭什么比得上我三代经商。那么普通人就毫无翻身之力吗？我认为也不是，现代教育制度其实已经给大家尽可能的机会平等了，在普世追求面前，给自己孩子安排一个工作，子承父业之类的桥段其实已经少了很多，至少看起来已经很不容易了。阶层固化依然存在，但如果不付出努力，大家的阶层都在往下掉，想要保住还是需要后天，不会出现皇子一出生就世袭这样的事情了。</p><p>以上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;带语气视频版：&lt;a href=&quot;https://www.bilibili.com/video/BV1vt4y1R7gF/&quot;&gt;https://www.bilibili.com/video/BV1vt4y1R7gF/&lt;/a&gt;&lt;/p&gt;
&lt;HTML&gt;
&lt;iframe src=&quot;//</summary>
      
    
    
    
    <category term="life" scheme="https://licsber.site/categories/life/"/>
    
    
    <category term="bilibili" scheme="https://licsber.site/tags/bilibili/"/>
    
    <category term="video" scheme="https://licsber.site/tags/video/"/>
    
  </entry>
  
  <entry>
    <title>分享: 第四次博客重构</title>
    <link href="https://licsber.site/2023/08/20/%E5%88%86%E4%BA%AB%EF%BC%9A%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%9E%84/"/>
    <id>https://licsber.site/2023/08/20/%E5%88%86%E4%BA%AB%EF%BC%9A%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%9E%84/</id>
    <published>2023-08-19T19:43:06.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<p>视频介绍版：<a href="https://www.bilibili.com/video/BV1r14y1i71f/">https://www.bilibili.com/video/BV1r14y1i71f/</a></p><HTML><iframe src="//player.bilibili.com/player.html?aid=787456434&bvid=BV1r14y1i71f&cid=1240261255&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></HTML><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>断断续续博客也重构了四次了</p><p>博客园：<a href="https://www.cnblogs.com/licsber">https://www.cnblogs.com/licsber</a></p><p>语雀：<a href="https://www.yuque.com/licsber/blog">https://www.yuque.com/licsber/blog</a></p><h2 id="目前"><a href="#目前" class="headerlink" title="目前"></a>目前</h2><p>自建：<a href="https://licsber.site/">https://licsber.site</a></p><p>灾备：<a href="https://blog.licsber.site/">https://blog.licsber.site</a></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ol><li>博客本体：Hexo（基于NodeJS）</li><li>HTTPS: Let’s Encrypt 泛域名证书</li><li>灾备：Github Pages</li><li>CI&#x2F;CD：手动build Docker镜像</li><li>镜像仓库：阿里云ACR服务（个人免费）</li><li>静态文件服务：nginx</li><li>反向代理服务：Traefik</li><li>图床服务：Minio + Cloudflare反代（防刷流量）</li><li>服务管理：K8s（杀鸡用激光炮</li></ol><p>欢迎友链~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;视频介绍版：&lt;a href=&quot;https://www.bilibili.com/video/BV1r14y1i71f/&quot;&gt;https://www.bilibili.com/video/BV1r14y1i71f/&lt;/a&gt;&lt;/p&gt;
&lt;HTML&gt;
&lt;iframe src=&quot;//p</summary>
      
    
    
    
    <category term="tech" scheme="https://licsber.site/categories/tech/"/>
    
    
    <category term="bilibili" scheme="https://licsber.site/tags/bilibili/"/>
    
    <category term="video" scheme="https://licsber.site/tags/video/"/>
    
    <category term="K8s" scheme="https://licsber.site/tags/K8s/"/>
    
    <category term="Hexo" scheme="https://licsber.site/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>知识的诅咒</title>
    <link href="https://licsber.site/2023/08/14/%E7%9F%A5%E8%AF%86%E7%9A%84%E8%AF%85%E5%92%92/"/>
    <id>https://licsber.site/2023/08/14/%E7%9F%A5%E8%AF%86%E7%9A%84%E8%AF%85%E5%92%92/</id>
    <published>2023-08-14T14:20:06.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<p>知识的诅咒，简单来说就是一旦你掌握了某种知识，就很难站在没掌握这个知识的角度，去思考和理解他人。</p><p>这种信息不对称往往很难意识到，同样也没有银弹，最近几天的深入学习使我深刻地理解了它的意义，在我的知识领域，明白了为什么对于编程的初学者来说，即使是偏向口语化的代码看起来也像天书。</p><p><img src="https://cdn.licsber.site/blog/2023/230814-%E7%9F%A5%E8%AF%86%E7%9A%84%E8%AF%85%E5%92%92-%E7%8C%9C%E6%95%B0%E6%B8%B8%E6%88%8F.jpg" alt="很简单的小程序"></p><p>如上图，以程序员懒得去写的猜数游戏为例，规则很简单，代码生成一个随机数，用户不断输入猜测，代码则提示用户输入的数比生成的数大还是小。但我从没意识到的是，短短十几行代码，就已经包含了编译工具链安装和使用、编译执行流程、程序入口点、变量定义、基本语法、类型系统、标准库、输入输出、顺序结构、大小比较运算符、分支结构、模块导入、随机数库调用生成….这么多东西。如果已经有了这些前置知识，没有程序员愿意浪费时间来写一个猜数游戏，因为过于简单，但对于新手来说，正是一些前置知识的缺少造成了毁灭性的后果，编程的学习曲线过于陡峭让他们知难而退，像是一层厚障壁，不突破就只能被永远隔绝在外，永远无法体会编程的乐趣。</p><p>同样，理解我上面这段话也需要一些前置知识，同样受“知识的诅咒”影响，人类真是太可悲了。如：想要理解“没有银弹”，至少需要读过《人月神话》一样，没有这些共享的知识会让交流变得难以进行，变得鸡同鸭讲。</p><p>常识便是教育的最大阻碍，假如无法使用领域内常识性的专业术语，那么我就无法精确描述我擅长领域的某一概念，但一旦使用了这些术语，就会令未掌握这些术语的人感到迷茫，就像是一种诅咒，始终萦绕在上空。</p><p>从这个层面上说，人真的很孤独，拥有共同语言是一件很难的事情，像是我们在评价别人时，也常常难以认识到自己的“习以为常”，殊不知别人不一定有我们同等（优渥或寒酸）的条件、出身，“未经他人苦，莫劝他人善”，我们能做的便只有尊重他人命运，做好自己，过好自己的生活，不过度干涉他人就是最好的处世之道了，剩下的就交给际遇吧。</p><p>说到孤独，在这里也希望我未来的伴侣，如果我还能遇到那个她的话，能够和我拥有着相似的语言，同等或互补的知识架构体系，要不然人间走这一遭也未免太可怜了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;知识的诅咒，简单来说就是一旦你掌握了某种知识，就很难站在没掌握这个知识的角度，去思考和理解他人。&lt;/p&gt;
&lt;p&gt;这种信息不对称往往很难意识到，同样也没有银弹，最近几天的深入学习使我深刻地理解了它的意义，在我的知识领域，明白了为什么对于编程的初学者来说，即使是偏向口语化的代码</summary>
      
    
    
    
    <category term="life" scheme="https://licsber.site/categories/life/"/>
    
    
    <category term="人月神话" scheme="https://licsber.site/tags/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/"/>
    
    <category term="LOVE" scheme="https://licsber.site/tags/LOVE/"/>
    
  </entry>
  
  <entry>
    <title>licsber英文名的由来</title>
    <link href="https://licsber.site/2023/08/08/licsber%E8%8B%B1%E6%96%87%E5%90%8D%E7%9A%84%E7%94%B1%E6%9D%A5/"/>
    <id>https://licsber.site/2023/08/08/licsber%E8%8B%B1%E6%96%87%E5%90%8D%E7%9A%84%E7%94%B1%E6%9D%A5/</id>
    <published>2023-08-07T16:46:11.000Z</published>
    <updated>2025-03-01T02:59:05.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ol><li>当时看了B站一期节目 英文名可以没有任何意义 于是决定给自己整一个</li><li>因为我姓刘 所以想要以L字母开头</li><li>想要自己成为一个完美的辅助 完美的库人才 所以自己名字里加了lib</li><li>为了平衡 后面的字母想要不往上也不往下的 对比起来er不错</li><li>剩下就是随缘增加字母了</li><li>后来因为觉得Licsber看起来不如licsber简短</li><li>所以后续表示名字的时候使用小写 表示我的组织&#x2F;设备时大写</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原则&quot;&gt;&lt;a href=&quot;#原则&quot; class=&quot;headerlink&quot; title=&quot;原则&quot;&gt;&lt;/a&gt;原则&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;当时看了B站一期节目 英文名可以没有任何意义 于是决定给自己整一个&lt;/li&gt;
&lt;li&gt;因为我姓刘 所以想要以L字母开头&lt;/li&gt;</summary>
      
    
    
    
    <category term="my" scheme="https://licsber.site/categories/my/"/>
    
    
  </entry>
  
</feed>
